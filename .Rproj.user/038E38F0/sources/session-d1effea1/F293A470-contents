setwd("~/OneDrive - University of Toronto/STA130-Harsh’s MacBook Air/capstone project")
library(readr)
plasticc_test_set_batch1 <- read_csv("~/OneDrive - University of Toronto/STA130-Harsh’s MacBook Air/capstone project/plasticc_test_set_batch1.csv")
View(plasticc_test_set_batch1)
library(readr)
plasticc_train_metadata <- read_csv("~/OneDrive - University of Toronto/STA130-Harsh’s MacBook Air/capstone project/plasticc_train_metadata.csv")
View(plasticc_train_metadata)
library(readr)
plasticc_test_metadata <- read_csv("~/OneDrive - University of Toronto/STA130-Harsh’s MacBook Air/capstone project/plasticc_test_metadata.csv")
View(plasticc_test_metadata)
library(tidyverse)
library(arrow)
library(dplyr)
library(lubridate)
climate <- read.csv("USW00013958.csv", header = TRUE)
# convert temperature to degrees Celsius
climate$TMAX <- climate$TMAX/10
climate$TMIN <- climate$TMIN/10
# calculate average temperature for each year
climat_avg <- climate %>%
mutate(year = year(DATE)) %>%
filter(year >= 1950 & year < 2023) %>%
group_by(year) %>%
summarize(avg_temp = mean((TMIN + TMAX)/2))
# create table
climat_table <- data.frame(Year = climat_avg$year, Average_Temperature_Celsius = climat_avg$avg_temp)
write.csv(climat_table, "climate_table.csv", row.names = FALSE)
library(ggplot2)
# create plot object
climate_plot <- ggplot(climat_avg, aes(x = year, y = avg_temp)) +
geom_line(color = "blue", size = 0.5) +
labs(title = "Average Temperature in Austin, Texas",
y = "Average Temperature (°C)", x = "Year") +
theme(plot.title = element_text(hjust = 0.5))
# add mean and median curves
climate_plot <- climate_plot +
geom_smooth(aes(y = avg_temp), se = FALSE, color = "red", method = "lm") +
geom_smooth(aes(y = avg_temp), se = FALSE, color = "green", method = "loess")
# display plot
climate_plot
# Fit a quadratic model to the data
model <- lm(Average_Temperature_Celsius ~ poly(Year, 2), data = climat_table)
# plot the data and model
plot(climat_table$Year, climat_table$Average_Temperature_Celsius, xlab = "Year", ylab = "Average Temperature (Celsius)")
lines(climat_table$Year, predict(model), col = "red", lwd = 2)
# read data from csv file
climate_table <- read.csv("climate_table.csv", header = TRUE)
# fit a quadratic model to the data
model <- lm(Average_Temperature_Celsius ~ poly(Year, 2), data = climate_table)
# plot the data and model
plot(climate_table$Year, climate_table$Average_Temperature_Celsius, xlab = "Year", ylab = "Average Temperature (Celsius)", type = "l")
lines(climate_table$Year, predict(model), col = "red", lwd = 2)
# Fitting a quadratic function
model <- lm(Average_Temperature_Celsius ~ Year + I(Year^2), data = data)
# Summary of the model
summary(model)
library(tidyverse)
library(ggplot2)
library(arrow)
library(dplyr)
library(randomForest)
library(boot)
library(purrr)
library(lmtest)
df <- read_parquet("gz2_catalog_with_modern_schema_no_paths.parquet")
glimpse(df)
df2 <- read_parquet("nsa_v1_0_1_key_cols.parquet")
glimpse(df2)
df3 <- merge(df, df2, by="iauname")
glimpse(df3)
df3 <- df3 %>%
mutate(galaxy_type = case_when(
`smooth-or-featured-gz2_smooth_fraction` >= 0.65 ~ "smooth",
`disk-edge-on-gz2_yes` >= 0.65 ~ "edge_on",
`bar-gz2_yes` >= 0.65 ~ "bar",
`has-spiral-arms-gz2_yes` >= 0.65 ~ "spiral",
TRUE ~ "other"
))
average_size <- df3 %>%
group_by(galaxy_type) %>%
summarize(
mean_petro_theta = mean(petro_theta, na.rm = TRUE),
mean_petro_th50 = mean(petro_th50, na.rm = TRUE),
mean_petro_th90 = mean(petro_th90, na.rm = TRUE)
)
average_size
galaxy_bootstrap_matrix <- function(df3, indices) {
d <- df3[indices, ]
result <- d %>%
group_by(galaxy_type) %>%
summarize(
mean_petro_theta = mean(petro_theta, na.rm = TRUE),
mean_petro_th50 = mean(petro_th50, na.rm = TRUE),
mean_petro_th90 = mean(petro_th90, na.rm = TRUE)
)
return(as.matrix(result))
}
boot_results <- boot(data = df3, statistic = galaxy_bootstrap_matrix, R = 1000)
combinations <- expand.grid(unique(df3$galaxy_type), unique(df3$galaxy_type))
combinations <- combinations[combinations$Var1 != combinations$Var2, ]
t_test_results <- data.frame()
for (i in 1:nrow(combinations)) {
type1 <- as.character(combinations$Var1[i])
type2 <- as.character(combinations$Var2[i])
t_test_theta <- t.test(df3$petro_theta[df3$galaxy_type == type1], df3$petro_theta[df3$galaxy_type == type2])
t_test_th50 <- t.test(df3$petro_th50[df3$galaxy_type == type1], df3$petro_th50[df3$galaxy_type == type2])
t_test_th90 <- t.test(df3$petro_th90[df3$galaxy_type == type1], df3$petro_th90[df3$galaxy_type == type2])
t_test_results <- rbind(t_test_results, data.frame(
type1 = type1,
type2 = type2,
p_value_theta = t_test_theta$p.value,
p_value_th50 = t_test_th50$p.value,
p_value_th90 = t_test_th90$p.value
))
}
print(t_test_results)
library(ggplot2)
ggplot(df3, aes(x = petro_theta, y = galaxy_type)) +
geom_point(alpha = 0.5) +
labs(x = "Petro theta", y = "Galaxy Type", title = "Scatter plot of Galaxy Sizes by Morphology Type") +
theme_minimal()
ggplot(df3, aes(x = petro_theta, y = petro_th90, color = galaxy_type)) +
geom_point(alpha = 0.5) +
labs(x = "Petro theta", y = "Petro th90", title = "Scatter plot of Galaxy Sizes by Morphology Type") +
theme_minimal()
ggplot(df3, aes(x = petro_th50, y = petro_th90, color = galaxy_type)) +
geom_point(alpha = 0.5) +
labs(x = "Petro th50", y = "Petro th90", title = "Scatter plot of Galaxy Sizes by Morphology Type") +
theme_minimal()
library(ggplot2)
ggplot(df3, aes(x = galaxy_type, y = petro_theta, fill = galaxy_type)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white", alpha = 0.5) +
labs(title = "Distribution of Galaxy Sizes by Morphology Type",
x = "Morphology Type",
y = "Galaxy Size (petro_theta)") +
theme_minimal() +
theme(legend.position = "none")
# Convert galaxy type to a factor variable
df3$galaxy_type_factor <- as.factor(df3$galaxy_type)
# Fit the linear regression model for different size measurements (petro_theta, petro_th50, petro_th90)
model_petro_theta <- lm(petro_theta ~ galaxy_type_factor, data = df3)
model_petro_th50 <- lm(petro_th50 ~ galaxy_type_factor, data = df3)
model_petro_th90 <- lm(petro_th90 ~ galaxy_type_factor, data = df3)
# Run ANOVA tests to determine the significance of galaxy type for each model
anova_petro_theta <- anova(model_petro_theta)
anova_petro_th50 <- anova(model_petro_th50)
anova_petro_th90 <- anova(model_petro_th90)
# Display the results of the ANOVA tests
anova_petro_theta
anova_petro_th50
anova_petro_th90
# Display the coefficients, p-values, and other summary statistics for each model
summary(model_petro_theta)
summary(model_petro_th50)
summary(model_petro_th90)
# Perform a global test for the joint significance of all coefficients in each model
wald_petro_theta <- waldtest(model_petro_theta)
wald_petro_th50 <- waldtest(model_petro_th50)
wald_petro_th90 <- waldtest(model_petro_th90)
# Display the results of the Wald tests
wald_petro_theta
wald_petro_th50
wald_petro_th90
# Convert galaxy_type to a factor variable
df3$galaxy_type_factor <- as.factor(df3$galaxy_type)
# Fit a multiple regression model with petro_theta as the response variable
model_multivar <- lm(petro_theta ~ galaxy_type_factor + ra.x + dec.x + redshift, data = df3)
# View the model summary
summary(model_multivar)
View(combinations)
View(boot_results)
plot(cars)
#### Workspace setup ####
# install.packages("tidyverse")
# install.packages("janitor")
library(tidyverse)
library(janitor)
#### Workspace setup ####
install.packages("tidyverse")
install.packages("janitor")
# library(tidyverse)
# library(janitor)
install.packages("tidyverse")
#### Workspace setup ####
# install.packages("tidyverse")
# install.packages("janitor")
library(tidyverse)
library(janitor)
#### Read in the data ####
raw_elections_data <-
read_csv(
file =
"https://www.elections.ca/res/rep/off/ovr2021app/53/data_donnees/table_tableau11.csv",
show_col_types = FALSE,
skip = 1
)
# We have read the data from the AEC website. We may like to save
# it in case something happens or they move it.
write_csv(
x = raw_elections_data,
file = "canada_voting.csv"
)
head(raw_elections_data)
tail(raw_elections_data)
plot(cars)
#### Workspace setup ####
# install.packages("tidyverse")
# install.packages("janitor")
library(tidyverse)
library(janitor)
#### Read in the data ####
raw_elections_data <-
read_csv(
file =
"https://www.elections.ca/res/rep/off/ovr2021app/53/data_donnees/table_tableau11.csv",
show_col_types = FALSE,
)
write_csv(
x = raw_elections_data,
file = "canada_voting.csv"
)
head(raw_elections_data)
tail(raw_elections_data)
set.seed(646)
# Simulate data
simulated_data <-
tibble(
# Use 1 through to 338 to represent each federal riding
"Division" = 1:338,
# Randomly pick an option, with replacement, 338 times
"Party" = sample(
x = c("Liberal", "Conservative", "Bloc Québécois", "New Democratic", "Green"),
size = 338,
replace = TRUE
)
)
simulated_data
raw_canadian_elections <-
read_csv(
file = "canadian_elections.csv",
show_col_types = FALSE
)
plot(cars)
#### Workspace setup ####
# install.packages("tidyverse")
# install.packages("janitor")
library(tidyverse)
library(janitor)
#### Read in the data ####
raw_elections_data <-
read_csv(
file =
"https://www.elections.ca/res/rep/off/ovr2021app/53/data_donnees/table_tableau11.csv",
show_col_types = FALSE,
)
write_csv(
x = raw_elections_data,
file = "canada_voting.csv"
)
head(raw_elections_data)
tail(raw_elections_data)
set.seed(646)
# Simulate data
simulated_data <-
tibble(
# Use 1 through to 338 to represent each federal riding
"Division" = 1:338,
# Randomly pick an option, with replacement, 338 times
"Party" = sample(
x = c("Liberal", "Conservative", "Bloc Québécois", "New Democratic", "Green"),
size = 338,
replace = TRUE
)
)
simulated_data
raw_canadian_elections <-
read_csv(
file = "canadian_elections.csv",
show_col_types = FALSE
)
plot(cars)
#### Workspace setup ####
# install.packages("tidyverse")
# install.packages("janitor")
library(tidyverse)
library(janitor)
#### Read in the data ####
raw_elections_data <-
read_csv(
file =
"https://www.elections.ca/res/rep/off/ovr2021app/53/data_donnees/table_tableau11.csv",
show_col_types = FALSE,
)
write_csv(
x = raw_elections_data,
file = "canada_elections.csv"
)
head(raw_elections_data)
tail(raw_elections_data)
set.seed(646)
# Simulate data
simulated_data <-
tibble(
# Use 1 through to 338 to represent each federal riding
"Division" = 1:338,
# Randomly pick an option, with replacement, 338 times
"Party" = sample(
x = c("Liberal", "Conservative", "Bloc Québécois", "New Democratic", "Green"),
size = 338,
replace = TRUE
)
)
simulated_data
raw_canadian_elections <-
read_csv(
file = "canadian_elections.csv",
show_col_types = FALSE
)
plot(cars)
#### Workspace setup ####
# install.packages("tidyverse")
# install.packages("janitor")
library(tidyverse)
library(janitor)
#### Read in the data ####
raw_elections_data <-
read_csv(
file =
"https://www.elections.ca/res/rep/off/ovr2021app/53/data_donnees/table_tableau11.csv",
show_col_types = FALSE,
)
write_csv(
x = raw_elections_data,
file = "canadian_elections.csv"
)
head(raw_elections_data)
tail(raw_elections_data)
set.seed(646)
# Simulate data
simulated_data <-
tibble(
# Use 1 through to 338 to represent each federal riding
"Division" = 1:338,
# Randomly pick an option, with replacement, 338 times
"Party" = sample(
x = c("Liberal", "Conservative", "Bloc Québécois", "New Democratic", "Green"),
size = 338,
replace = TRUE
)
)
simulated_data
raw_canadian_elections <-
read_csv(
file = "canadian_elections.csv",
show_col_types = FALSE
)
# Clean the column names
cleaned_canadian_elections <-
clean_names(raw_canadian_elections)
# Select relevant columns and rename them
cleaned_canadian_elections <-
cleaned_canadian_elections |>
select(
electoral_district_name_nom_de_circonscription,
elected_candidate_candidat_elu
) |>
rename(
electoral_district = electoral_district_name_nom_de_circonscription,
elected_candidate = elected_candidate_candidat_elu
)
cleaned_canadian_elections <-
cleaned_canadian_elections |>
separate(col = elected_candidate,
into = c("Other", "party"),
sep = "/") |>
select(-Other)
cleaned_canadian_elections <-
cleaned_canadian_elections |>
mutate(party = recode(party, "Libéral" = "Liberal",
"Conservateur" = "Conservative",
"Bloc Québécois" = "Bloc Quebecois",
"NPD-Nouveau Parti démocratique" = "New Democratic Party",
"Parti Vert" = "Green Party")
)
write_csv(
x = cleaned_canadian_elections,
file = "cleaned_canadian_elections.csv"
)
cleaned_elections_data <-
read_csv(
file = "cleaned_canadian_elections.csv",
show_col_types = FALSE
)
cleaned_elections_data |>
count(party)
cleaned_elections_data |>
ggplot(aes(x = party)) +
geom_bar() +
labs(x = "Party", y = "Number of seats") # Make labels more meaningful
source("~/.active-rstudio-document", echo=TRUE)
install git
brew install git
brew install git
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
ssh -T git@github.com
setwd("~/OneDrive - University of Toronto/STA304/project 2/USA_Election_Prediction")
source("~/OneDrive - University of Toronto/STA304/project 2/USA_Election_Prediction/scripts/00-simulate_data.R", echo=TRUE)
source("~/OneDrive - University of Toronto/STA304/project 2/USA_Election_Prediction/scripts/01-test_simulated_data.R", echo=TRUE)
source("~/OneDrive - University of Toronto/STA304/project 2/USA_Election_Prediction/scripts/02-download_data.R", echo=TRUE)
source("~/OneDrive - University of Toronto/STA304/project 2/USA_Election_Prediction/scripts/03-clean_data.R", echo=TRUE)
source("~/OneDrive - University of Toronto/STA304/project 2/USA_Election_Prediction/scripts/04-test_analysis_data.R", echo=TRUE)
source("~/OneDrive - University of Toronto/STA304/project 2/USA_Election_Prediction/scripts/05-exploratory_data_analysis.R", echo=TRUE)
source("~/OneDrive - University of Toronto/STA304/project 2/USA_Election_Prediction/scripts/06-model_data.R", echo=TRUE)
source("~/OneDrive - University of Toronto/STA304/project 2/USA_Election_Prediction/scripts/07-replications.R", echo=TRUE)
